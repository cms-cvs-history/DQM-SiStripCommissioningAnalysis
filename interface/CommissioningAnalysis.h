#ifndef DQM_SiStripCommissioningAnalysis_CommissioningAnalysis_H
#define DQM_SiStripCommissioningAnalysis_CommissioningAnalysis_H

#include "DataFormats/SiStripCommon/interface/SiStripFecKey.h"
#include "DataFormats/SiStripCommon/interface/SiStripFedKey.h"
#include <boost/cstdint.hpp>
#include <sstream>
#include <string>
#include <vector>

class TH1;

/**
   @class CommissioningAnalysis
   @author M.Wingham, R.Bainbridge 
   
   @brief Abstract base for derived classes that provide analysis of
   commissioning histograms.
*/
class CommissioningAnalysis {

 public:

  // ---------- Con(de)structors and typedefs ----------
  
  CommissioningAnalysis( const uint32_t& key, 
			 const std::string& my_name );
  CommissioningAnalysis( const std::string& my_name );
  virtual ~CommissioningAnalysis() {;}

  // Various typedefs for useful containers
  typedef std::vector<float> VFloat;
  typedef std::vector<VFloat> VVFloat;
  typedef std::vector<uint16_t> VInt;
  typedef std::vector<VInt> VVInt;
  typedef std::vector<std::string> VString;

  /** Container for histogram pointers and titles. */
  typedef std::pair<TH1*,std::string> Histo;

  // ---------- Utility methods ----------
  
  /** Performs histogram analysis. */
  void analysis( const std::vector<TH1*>& );
  
  /** Identifies if analysis is valid or not. */
  virtual bool isValid() const { return true; } //@@ pure virtual
  
  /** Prints analysis results. */
  virtual void print( std::stringstream&, uint32_t ) = 0;

  /** Returns error codes generated by analyses. */ 
  inline const VString& getErrorCodes() const;

  /** Returns FEC key object (encodes control structure). */
  inline const SiStripFecKey& fecKey() const;

  /** Returns FED key object (encodes readout structure). */
  inline const SiStripFedKey& fedKey() const;
  
  /** Returns DCU id. */
  inline const uint32_t& dcuId() const;
  
  /** Returns DetId. */
  inline const uint32_t& detId() const;
  
  /** Sets DCU id. */
  inline void dcuId( const uint32_t& );
  
  /** Sets DetId. */
  inline void detId( const uint32_t& );
  
  /** Returns object name. */
  inline const std::string& myName() const;
  
 protected:

  // ---------- Protected utility methods ----------
  
  /** Additional information for analysis print(). */
  virtual void header( std::stringstream& ) const;

  /** Extracts FED key from histogram title. */
  void extractFedKey( const TH1* const );

  /** Sets error codes generated by analyses. */ 
  inline void setErrorCodes( const VString& errors );

  /** Adds error codes generated by analyses. */ 
  inline virtual void addErrorCode( const std::string& error );
  
 private:

  // ---------- Private methods ----------

  /** Private default constructor. */
  CommissioningAnalysis() {;}

  /** Resets analysis member data. */
  virtual void reset() = 0;

  /** Extracts and organises histograms. */
  virtual void extract( const std::vector<TH1*>& ) = 0;

  /** Performs histogram anaysis. */
  virtual void analyse() = 0;

  // ---------- Private member data ----------

  /** FEC key object. */
  SiStripFecKey fecKey_;

  /** FEC key object. */
  SiStripFedKey fedKey_;

  /** DCU Id. */
  uint32_t dcuId_;

  /** DetId. */
  uint32_t detId_;
  
  /** Object name. */
  std::string myName_;

  /** Error codes. */
  VString errors_;

};

// ---------- Inline methods ----------

const SiStripFecKey& CommissioningAnalysis::fecKey() const { return fecKey_; }
const SiStripFedKey& CommissioningAnalysis::fedKey() const { return fedKey_; }

const uint32_t& CommissioningAnalysis::dcuId() const { return dcuId_; }
const uint32_t& CommissioningAnalysis::detId() const { return detId_; }

void CommissioningAnalysis::dcuId( const uint32_t& dcu_id ) { dcuId_ = dcu_id; }
void CommissioningAnalysis::detId( const uint32_t& det_id ) { detId_ = det_id; }

const std::string& CommissioningAnalysis::myName() const { return myName_; }

const CommissioningAnalysis::VString& CommissioningAnalysis::getErrorCodes() const { return errors_; }
void CommissioningAnalysis::setErrorCodes( const VString& errors ) { errors_ = errors; }
void CommissioningAnalysis::addErrorCode( const std::string& error ) { errors_.push_back(error) ;}

#endif // DQM_SiStripCommissioningAnalysis_CommissioningAnalysis_H

